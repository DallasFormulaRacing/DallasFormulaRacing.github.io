{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"home/","text":"Home # Hey, welcome to the \"renovated\" onboarding for the Dallas Formula Racing - Software subteam! Here you will be able to find a table of contents for all of the various topics you should at least cover during your onboarding process, along with any \"basic\" resources you might need to get acquainted with the systems & technologies we use within our team. WIP This wiki is currently a work in progress project that does not reflect all of the resources or projects within DFR at this moment in time, and as such should not be treated as the be all and end all of information regarding our internal systems. Table of contents # Although this TOC is still maintained, it is highly recommended that you use the sidebar to navigate through the onboarding process. Home Resources New to CS/SE Learning Python Learning Git/Github Learning SQL Learning Docker Introduction # Unfortunately, as goes for many schools, UTD does not (in most cases) provide the needed learning material for many of the technologies that are utilized within DFR ( Dallas Formula Racing ). The same goes for many of the technologies that you will likely end up using in your professional life. Thus the goal of this \"onboarding\" is to give you \"Everything you need to knoooow, to get up to speeeeed, on DFR Software!\" (yea I'm a Donut fan, so what), and hopefully along the way you'll learn some things that will actually be applicable to your professional life in the future.","title":"Home"},{"location":"home/#home","text":"Hey, welcome to the \"renovated\" onboarding for the Dallas Formula Racing - Software subteam! Here you will be able to find a table of contents for all of the various topics you should at least cover during your onboarding process, along with any \"basic\" resources you might need to get acquainted with the systems & technologies we use within our team. WIP This wiki is currently a work in progress project that does not reflect all of the resources or projects within DFR at this moment in time, and as such should not be treated as the be all and end all of information regarding our internal systems.","title":"Home"},{"location":"home/#table-of-contents","text":"Although this TOC is still maintained, it is highly recommended that you use the sidebar to navigate through the onboarding process. Home Resources New to CS/SE Learning Python Learning Git/Github Learning SQL Learning Docker","title":"Table of contents"},{"location":"home/#introduction","text":"Unfortunately, as goes for many schools, UTD does not (in most cases) provide the needed learning material for many of the technologies that are utilized within DFR ( Dallas Formula Racing ). The same goes for many of the technologies that you will likely end up using in your professional life. Thus the goal of this \"onboarding\" is to give you \"Everything you need to knoooow, to get up to speeeeed, on DFR Software!\" (yea I'm a Donut fan, so what), and hopefully along the way you'll learn some things that will actually be applicable to your professional life in the future.","title":"Introduction"},{"location":"about/about/","text":"About # In an effort to better bring new members of the DFR Software team onboard, it was requested by Arjun Nayak that a slew of new resources be made or compiled into a single place. As such, here we are, the one stop shop of anything and everything you might need to know about the operations of DFR Software. From how to get started within our team, to the projects we are currently working on, and beyond, the goal of this wiki is to provide answers to any potential question you might have about DFR Software.","title":"About"},{"location":"about/about/#about","text":"In an effort to better bring new members of the DFR Software team onboard, it was requested by Arjun Nayak that a slew of new resources be made or compiled into a single place. As such, here we are, the one stop shop of anything and everything you might need to know about the operations of DFR Software. From how to get started within our team, to the projects we are currently working on, and beyond, the goal of this wiki is to provide answers to any potential question you might have about DFR Software.","title":"About"},{"location":"about/style-guide/","text":"Style Guide # As far as styling guidelines go for any official project or resource documentation, there is some flexibility depending on the project, but in almost all cases they should follow closely in line with the guidelines listed below. Documentation guidelines # Project documentation is one of the most important aspects of being a developer. As \"unfun\" as it can be to explain how your project works to an infant, it give's you ample insight into how you can make your project more usable for other developers on our team, while also enabling new members to start working with the code that you have written. Going into any documentation for DFR, you should have the mindset of needing to explain everything that you can in as great a detail as possible. Even if that means explaining some very basic things that might not be valuable to you, this kind of documentation for new members who may know little to nothing about development, let alone CS as a whole, is incredibly useful. Now, this doesn't mean that you need to explain every single line of code that you write, and unlike many of the beginner level CS and SE courses here at UTD, you will not be required to document specific statements within your code, primarily the highlights, so any functions, class definitions, and overarching project goals, should be explained in as much detail as possible, while also being as verbose as possible. What \"verbose\" means is partially up for interpretation as everyone has their own individual writing styles, however, at it's core, being verbose means that you describe everything as \"simply\" as you can. \"Simply\" in this case not meaning low word count, it instead means in a method that is the easiest to understand. For example, if you were to describe to someone who has no clue what a Python dictionary object is by saying it's a \"way for you to use custom indexes for data storage under a single variable declaration,\" they would likely have no clue what that means. Instead, it would be better to describe a Python dictionary as \"a means of storing multiple data points under one variable declaration, where each data point has its own unique name, known as an index.\" In essence, don't describe your functions as if the end user knows what they do based off their name alone, ex. for a function you should describe what the function does as a whole initially, then describe each of the required arguments for that function, and what the expected values of those arguments are. It's also generally a good idea to include an example usage of your work, if that's an entire file, or just a single line snippet included after each documented chunk, it's incredibly useful for someone just learning how to use your work. Headings and titles # All section titles should use Title Case . This means that every major word in a sentence should be capitalized in correspondence with the APA standard. # This is the Title of a Document Sentence case should be used all for headings. In essence, only capitalize the first word; other words in the sentence are only capitalized if they would normally be in a sentence. (Things like names, places, and so on, just follow general writing guidelines. This does NOT MEAN use punctuation, unless specifically required.). When making headers, make sure to nest your headings for related topics. For markdown based documentation this is done by using increasing numbers of # followed by the heading's text. Each \"major\" section (such as a list of classes, functions, how to use your code, and so on.) should all be defined by a ## header. Single # headers are reserved for titles only, and in order to keep our documentation neat and presentable, any major sections should be documented by the usage of ## If you haven't noticed already, the sidebar of our Wiki lists all the important headings in order of how they appear within their respective Markdown files. Each of the subsections that are displayed underneath each major section, such as New to CS/SE , there are the Example header hierarchy # This is the Title of a Document ## This is the primary header ### This is a nested header Example page layout # My Project ## Introduction ### Our goal ## Getting started ### Installation ### List of functions #### Function 1 #### Function 2 Back to back headers # When you have a header right below another header, you should include a section break using a horizontal rule (---). As the section below is an example of this, without the inclusion of a triple dash there is no clear split between the headings besides the slight font size change, where as with a triple dash there is a much more evident break between the two headings. This is ONLY required if there is NO content between the headings, for example; back to back headings, as detailed below. ## Heading 1 --- ### Heading 2 Formatting conventions # File names, file paths, variables, literals, and endpoints # All filenames, filepaths, variables, literals, and endpoints, should be enclosed within backticks . In Markdown, this allows you to render anything between the two backticks inline and with fixed-pitch font. This is incredibly useful for anything code related where readability is imperative. Below is a list of proper usages of each of these requirements. File names and directories (file paths); for example main.py or app/main.py . Any code elements when used inline, such as object names, function calls, and so on; for example variable = None or app.main() . URLs and endpoints, unless they are not code critical, such as citing a source or external site for additional information within your docs; for example http://127.0.0.1:8000 or home/about . Code samples # Code samples longer than a single line should be put within an appropriate fenced code block via the usage of 3 backticks (```) or 3 tildes (~~~). Unless there isn't a given language for your code block, then you should should always specify the language being used in a fenced code block to enable syntax highlighting. Examples of the difference between non highlighted and highlighted can be found here . However, below you can find an example of a properly formatted code block with syntax highlighting for the Python language. import random print(random.randint(0,9)) Lists # Use numbered lists only when the order of the items is important; for example, the steps in a procedure: Step one Step two And so on Use bulleted lists when you have three or more items in a list in which the order does not matter; for example: Lists: Are easier to read than large blocks of text. Make items stand out. Clearly identify parallel items. NEVER use a bullet to start a regular paragraph. ALWAYS Capitalize items in a list, and end each item with a period ONLY when ending a sentence; such as: In this example. In this other example. In this final example. NEVER end a list with a comma, semicolon, or colon. Notes, warnings, and related information # Because of the documentation framework we are using, we have the ability to declare specific blocks of related information. This is NOT a built in feature of Markdown, and instead is a part of an extension for MkDocs called Admonitions All notes, warnings, and any related information should be placed into their respective admonitions. To declare an admonition, start a line with (!!!) followed by the type of admonition you want to use, this can be any of the following types, attention , caution , danger , error , hint , important , note , tip , and warning . After you have (!!!) followed by your type, such as !!! info you then should specify a name for the block in quotations. Finally make a new line and indent then type out the content of the admonition. !!! info \"This is an info block\" Just some info! This is an info block Just some info! !!! warning \"This is a warning block\" Warning! This is a warning block Warning! !!! error \"This is an error block\" Error! This is an error block Error! Spelling, grammar, and usage # Use American spelling and grammar: \"behavior\" instead of \"behaviour,\" \"color\" instead of \"colour,\" and so on. Collective nouns, such as organizations, are singular, not plural: CORRECT : DFR is a club at UT Dallas (standard American usage). INCORRECT : DFR are a club at UT Dallas (standard British usage). In lists of three or more items, use the Oxford comma . Do not use Latin abbreviations, which may not be understood by all readers. Instead use the English equivalent: Instead of \"i.e.\" use \"that is.\" Instead of \"e.g.\" use \"for example.\" Instead of \"etc\" use \"and so on.\" Punctuation should be put inside quotation marks when applicable. For example: \"Hello,\" \"hi,\" and \"greetings\" are all proper ways to greet someone. However, there is an exception to the above rule. In the event that you are declaring a literal within quotations, or if the meaning would otherwise be unclear, then you are able to put the comma outside of the quotation mark. For example: ```txt At the prompt enter \"Y\", then press Enter on your keyboard.","title":"Style Guide"},{"location":"about/style-guide/#style-guide","text":"As far as styling guidelines go for any official project or resource documentation, there is some flexibility depending on the project, but in almost all cases they should follow closely in line with the guidelines listed below.","title":"Style Guide"},{"location":"about/style-guide/#documentation-guidelines","text":"Project documentation is one of the most important aspects of being a developer. As \"unfun\" as it can be to explain how your project works to an infant, it give's you ample insight into how you can make your project more usable for other developers on our team, while also enabling new members to start working with the code that you have written. Going into any documentation for DFR, you should have the mindset of needing to explain everything that you can in as great a detail as possible. Even if that means explaining some very basic things that might not be valuable to you, this kind of documentation for new members who may know little to nothing about development, let alone CS as a whole, is incredibly useful. Now, this doesn't mean that you need to explain every single line of code that you write, and unlike many of the beginner level CS and SE courses here at UTD, you will not be required to document specific statements within your code, primarily the highlights, so any functions, class definitions, and overarching project goals, should be explained in as much detail as possible, while also being as verbose as possible. What \"verbose\" means is partially up for interpretation as everyone has their own individual writing styles, however, at it's core, being verbose means that you describe everything as \"simply\" as you can. \"Simply\" in this case not meaning low word count, it instead means in a method that is the easiest to understand. For example, if you were to describe to someone who has no clue what a Python dictionary object is by saying it's a \"way for you to use custom indexes for data storage under a single variable declaration,\" they would likely have no clue what that means. Instead, it would be better to describe a Python dictionary as \"a means of storing multiple data points under one variable declaration, where each data point has its own unique name, known as an index.\" In essence, don't describe your functions as if the end user knows what they do based off their name alone, ex. for a function you should describe what the function does as a whole initially, then describe each of the required arguments for that function, and what the expected values of those arguments are. It's also generally a good idea to include an example usage of your work, if that's an entire file, or just a single line snippet included after each documented chunk, it's incredibly useful for someone just learning how to use your work.","title":"Documentation guidelines"},{"location":"about/style-guide/#headings-and-titles","text":"All section titles should use Title Case . This means that every major word in a sentence should be capitalized in correspondence with the APA standard. # This is the Title of a Document Sentence case should be used all for headings. In essence, only capitalize the first word; other words in the sentence are only capitalized if they would normally be in a sentence. (Things like names, places, and so on, just follow general writing guidelines. This does NOT MEAN use punctuation, unless specifically required.). When making headers, make sure to nest your headings for related topics. For markdown based documentation this is done by using increasing numbers of # followed by the heading's text. Each \"major\" section (such as a list of classes, functions, how to use your code, and so on.) should all be defined by a ## header. Single # headers are reserved for titles only, and in order to keep our documentation neat and presentable, any major sections should be documented by the usage of ## If you haven't noticed already, the sidebar of our Wiki lists all the important headings in order of how they appear within their respective Markdown files. Each of the subsections that are displayed underneath each major section, such as New to CS/SE , there are the Example header hierarchy # This is the Title of a Document ## This is the primary header ### This is a nested header Example page layout # My Project ## Introduction ### Our goal ## Getting started ### Installation ### List of functions #### Function 1 #### Function 2","title":"Headings and titles"},{"location":"about/style-guide/#back-to-back-headers","text":"When you have a header right below another header, you should include a section break using a horizontal rule (---). As the section below is an example of this, without the inclusion of a triple dash there is no clear split between the headings besides the slight font size change, where as with a triple dash there is a much more evident break between the two headings. This is ONLY required if there is NO content between the headings, for example; back to back headings, as detailed below. ## Heading 1 --- ### Heading 2","title":"Back to back headers"},{"location":"about/style-guide/#formatting-conventions","text":"","title":"Formatting conventions"},{"location":"about/style-guide/#file-names-file-paths-variables-literals-and-endpoints","text":"All filenames, filepaths, variables, literals, and endpoints, should be enclosed within backticks . In Markdown, this allows you to render anything between the two backticks inline and with fixed-pitch font. This is incredibly useful for anything code related where readability is imperative. Below is a list of proper usages of each of these requirements. File names and directories (file paths); for example main.py or app/main.py . Any code elements when used inline, such as object names, function calls, and so on; for example variable = None or app.main() . URLs and endpoints, unless they are not code critical, such as citing a source or external site for additional information within your docs; for example http://127.0.0.1:8000 or home/about .","title":"File names, file paths, variables, literals, and endpoints"},{"location":"about/style-guide/#code-samples","text":"Code samples longer than a single line should be put within an appropriate fenced code block via the usage of 3 backticks (```) or 3 tildes (~~~). Unless there isn't a given language for your code block, then you should should always specify the language being used in a fenced code block to enable syntax highlighting. Examples of the difference between non highlighted and highlighted can be found here . However, below you can find an example of a properly formatted code block with syntax highlighting for the Python language. import random print(random.randint(0,9))","title":"Code samples"},{"location":"about/style-guide/#lists","text":"Use numbered lists only when the order of the items is important; for example, the steps in a procedure: Step one Step two And so on Use bulleted lists when you have three or more items in a list in which the order does not matter; for example: Lists: Are easier to read than large blocks of text. Make items stand out. Clearly identify parallel items. NEVER use a bullet to start a regular paragraph. ALWAYS Capitalize items in a list, and end each item with a period ONLY when ending a sentence; such as: In this example. In this other example. In this final example. NEVER end a list with a comma, semicolon, or colon.","title":"Lists"},{"location":"about/style-guide/#notes-warnings-and-related-information","text":"Because of the documentation framework we are using, we have the ability to declare specific blocks of related information. This is NOT a built in feature of Markdown, and instead is a part of an extension for MkDocs called Admonitions All notes, warnings, and any related information should be placed into their respective admonitions. To declare an admonition, start a line with (!!!) followed by the type of admonition you want to use, this can be any of the following types, attention , caution , danger , error , hint , important , note , tip , and warning . After you have (!!!) followed by your type, such as !!! info you then should specify a name for the block in quotations. Finally make a new line and indent then type out the content of the admonition. !!! info \"This is an info block\" Just some info! This is an info block Just some info! !!! warning \"This is a warning block\" Warning! This is a warning block Warning! !!! error \"This is an error block\" Error! This is an error block Error!","title":"Notes, warnings, and related information"},{"location":"about/style-guide/#spelling-grammar-and-usage","text":"Use American spelling and grammar: \"behavior\" instead of \"behaviour,\" \"color\" instead of \"colour,\" and so on. Collective nouns, such as organizations, are singular, not plural: CORRECT : DFR is a club at UT Dallas (standard American usage). INCORRECT : DFR are a club at UT Dallas (standard British usage). In lists of three or more items, use the Oxford comma . Do not use Latin abbreviations, which may not be understood by all readers. Instead use the English equivalent: Instead of \"i.e.\" use \"that is.\" Instead of \"e.g.\" use \"for example.\" Instead of \"etc\" use \"and so on.\" Punctuation should be put inside quotation marks when applicable. For example: \"Hello,\" \"hi,\" and \"greetings\" are all proper ways to greet someone. However, there is an exception to the above rule. In the event that you are declaring a literal within quotations, or if the meaning would otherwise be unclear, then you are able to put the comma outside of the quotation mark. For example: ```txt At the prompt enter \"Y\", then press Enter on your keyboard.","title":"Spelling, grammar, and usage"},{"location":"projects/data-api/","text":"Placeholder","title":"Data API"},{"location":"resources/learning-Docker/","text":"Introduction # Unlike Python and Git , Docker isn't necessarily required that you know how to \"program\" in it (AKA, write .dockerfile s), more so that you know what it is, and how to use it to its fullest potential. A quick and dirty explanation of what docker is in a practical sense is a method of virtualizing and containerizing our various software products. What is virtualization? Virtualization is a method of taking one computer and splitting it into many smaller computers. Of course these smaller computers all have to share the same resources that the original computer had, so it may be best to think about it as if the original computer was a pie, and each of the virtual computers is a slice of that pie. Essentially we take one much more powerful computer, and split it into little chunks that allow us to run one of our software products on an individual slice of that virtual pie. Overall though, I suggest you read about how virtualization works and why its beneficial in this article from IBM . What is containerization? In essence containerization is the ability for an application to be condensed into a single \"executable.\" What this means in regard to Docker is that when you are creating an application for a Docker environment, you are effectively taking your entire codebase and condensing it into a single \"file,\" of which in this case is called a Docker Container. For a more in depth exploration of what containerization is, please check out this article from IBM . Table of contents # Introduction Table of Contents Where do I begin? Text Resources Video Resources Where do I begin? # Many people come to DFR, and the workplace, having never used or even heard about Docker , so don't think you're alone. Docker is a very unique concept for most, and the goal of the below resources is to help guide you into learning at the very least how to utilize Docker in your workflow. Then come time to deploy any applications that you might make while you are at DFR, you will know how to build your application for the Docker environment. Text resources # Notice Out of both of these resources, the Docker 101 tutorial is easily the most important / useful. When learning Docker for the first time it is highly recommended that you cross reference the tutorial at least once. Name Description URL Docker 101 Tutorial A \"self paced, hands-on tutorial\" straight from the horse's mouth. This \"short\" tutorial will educate you on how to understand the concepts of the Docker environment, while also giving you practical knowledge on how to use the Docker environment locally. docker.com/101-tutorial awesome-docker Like awesome-python , this is a repo designed to educate you through all the in's and out's of Docker on a beginner to advanced level, and can be utilized by anyone regardless of their experience with Docker . github.com/veggiemonk/awesome-docker Video resources # Docker in 100 Seconds - Fireship # 100+ Docker Concepts you Need to Know - Fireship #","title":"Learning Docker"},{"location":"resources/learning-Docker/#introduction","text":"Unlike Python and Git , Docker isn't necessarily required that you know how to \"program\" in it (AKA, write .dockerfile s), more so that you know what it is, and how to use it to its fullest potential. A quick and dirty explanation of what docker is in a practical sense is a method of virtualizing and containerizing our various software products. What is virtualization? Virtualization is a method of taking one computer and splitting it into many smaller computers. Of course these smaller computers all have to share the same resources that the original computer had, so it may be best to think about it as if the original computer was a pie, and each of the virtual computers is a slice of that pie. Essentially we take one much more powerful computer, and split it into little chunks that allow us to run one of our software products on an individual slice of that virtual pie. Overall though, I suggest you read about how virtualization works and why its beneficial in this article from IBM . What is containerization? In essence containerization is the ability for an application to be condensed into a single \"executable.\" What this means in regard to Docker is that when you are creating an application for a Docker environment, you are effectively taking your entire codebase and condensing it into a single \"file,\" of which in this case is called a Docker Container. For a more in depth exploration of what containerization is, please check out this article from IBM .","title":"Introduction"},{"location":"resources/learning-Docker/#table-of-contents","text":"Introduction Table of Contents Where do I begin? Text Resources Video Resources","title":"Table of contents"},{"location":"resources/learning-Docker/#where-do-i-begin","text":"Many people come to DFR, and the workplace, having never used or even heard about Docker , so don't think you're alone. Docker is a very unique concept for most, and the goal of the below resources is to help guide you into learning at the very least how to utilize Docker in your workflow. Then come time to deploy any applications that you might make while you are at DFR, you will know how to build your application for the Docker environment.","title":"Where do I begin?"},{"location":"resources/learning-Docker/#text-resources","text":"Notice Out of both of these resources, the Docker 101 tutorial is easily the most important / useful. When learning Docker for the first time it is highly recommended that you cross reference the tutorial at least once. Name Description URL Docker 101 Tutorial A \"self paced, hands-on tutorial\" straight from the horse's mouth. This \"short\" tutorial will educate you on how to understand the concepts of the Docker environment, while also giving you practical knowledge on how to use the Docker environment locally. docker.com/101-tutorial awesome-docker Like awesome-python , this is a repo designed to educate you through all the in's and out's of Docker on a beginner to advanced level, and can be utilized by anyone regardless of their experience with Docker . github.com/veggiemonk/awesome-docker","title":"Text resources"},{"location":"resources/learning-Docker/#video-resources","text":"","title":"Video resources"},{"location":"resources/learning-Docker/#docker-in-100-seconds-fireship","text":"","title":"Docker in 100 Seconds - Fireship"},{"location":"resources/learning-Docker/#100-docker-concepts-you-need-to-know-fireship","text":"","title":"100+ Docker Concepts you Need to Know - Fireship"},{"location":"resources/learning-Git/","text":"Introduction # Outside of its use within DFR , Git is probably one of if not the most critical single piece of technology for collaborative workflows. It is essentially imparative that you at least understand how to use basic Git commands such as CHECKOUT, CLONE, COMMIT, PUSH, & PULL , both for your collaborative efforts within DFR, and in your professional life later. The most simple way to think of Git is as a \"version manager.\" In essence Git allows us to create and monitor different versions of our software \"automatically\" while also allowing us to merge the code of an entire team into one seamless location with little hassle. As you might be able to imagine, without a resource like this, knowing where certain code is coming from, and or combining various versions of a codebase together, would be incredibly difficult. GitHub on the other hand, unlike Git itself, is a platform that allows us to host our repositories on the Internet! It's essentially just \"more complicated\" cloud storage, with some very useful tools for a Git based dev cycle. Along with this, GitHub , is in essence the \"pioneer\" of Git based collaboration, meaning that a VERY LARGE chunk of the world's developers reside on GitHub, and as such knowing how to use the platform can be vital to your career. Table of contents # Introduction Table of Contents Where do I begin? Text Resources Video Resources Where do I begin? # Never used Git ? Heck, you may have never even used GitHub , but that's all good! The goal of this short \"lecture\" on Git / Github will hopefully give you everything you need to know to get up and running making and pushing your very first commits and pull requests! Text resources # Name Description URL OH MY GIT! This time in \"game\" form. One of my personal favorite means for teaching new / want to be developers the ropes in a method that they are likely more \"used\" to. ohmygit.org Learn Git Branching Another visually interactive platform for learning Git . Like OH MY GIT! this is much more tailored towards beginners to Git , and makes the learning process much more enjoyable than mindlessly reading documentation. learngitbranching.js.org Pro Git book A textbook that contains anything and everything Git . You can purchase a physical copy, or use the publically available E-Book found on the same website that you will likely be downloading the Git CLI from, git-scm.com . git-scm.com/book/en/v2 Video resources # Git Explained in 100 Seconds - Fireship # Git It? How to use Git and Github - Fireship # GitHub Pull Request in 100 Seconds - Fireship # Git vs. GitHub: What's the difference? - IBM Technology #","title":"Learning Git"},{"location":"resources/learning-Git/#introduction","text":"Outside of its use within DFR , Git is probably one of if not the most critical single piece of technology for collaborative workflows. It is essentially imparative that you at least understand how to use basic Git commands such as CHECKOUT, CLONE, COMMIT, PUSH, & PULL , both for your collaborative efforts within DFR, and in your professional life later. The most simple way to think of Git is as a \"version manager.\" In essence Git allows us to create and monitor different versions of our software \"automatically\" while also allowing us to merge the code of an entire team into one seamless location with little hassle. As you might be able to imagine, without a resource like this, knowing where certain code is coming from, and or combining various versions of a codebase together, would be incredibly difficult. GitHub on the other hand, unlike Git itself, is a platform that allows us to host our repositories on the Internet! It's essentially just \"more complicated\" cloud storage, with some very useful tools for a Git based dev cycle. Along with this, GitHub , is in essence the \"pioneer\" of Git based collaboration, meaning that a VERY LARGE chunk of the world's developers reside on GitHub, and as such knowing how to use the platform can be vital to your career.","title":"Introduction"},{"location":"resources/learning-Git/#table-of-contents","text":"Introduction Table of Contents Where do I begin? Text Resources Video Resources","title":"Table of contents"},{"location":"resources/learning-Git/#where-do-i-begin","text":"Never used Git ? Heck, you may have never even used GitHub , but that's all good! The goal of this short \"lecture\" on Git / Github will hopefully give you everything you need to know to get up and running making and pushing your very first commits and pull requests!","title":"Where do I begin?"},{"location":"resources/learning-Git/#text-resources","text":"Name Description URL OH MY GIT! This time in \"game\" form. One of my personal favorite means for teaching new / want to be developers the ropes in a method that they are likely more \"used\" to. ohmygit.org Learn Git Branching Another visually interactive platform for learning Git . Like OH MY GIT! this is much more tailored towards beginners to Git , and makes the learning process much more enjoyable than mindlessly reading documentation. learngitbranching.js.org Pro Git book A textbook that contains anything and everything Git . You can purchase a physical copy, or use the publically available E-Book found on the same website that you will likely be downloading the Git CLI from, git-scm.com . git-scm.com/book/en/v2","title":"Text resources"},{"location":"resources/learning-Git/#video-resources","text":"","title":"Video resources"},{"location":"resources/learning-Git/#git-explained-in-100-seconds-fireship","text":"","title":"Git Explained in 100 Seconds - Fireship"},{"location":"resources/learning-Git/#git-it-how-to-use-git-and-github-fireship","text":"","title":"Git It? How to use Git and Github - Fireship"},{"location":"resources/learning-Git/#github-pull-request-in-100-seconds-fireship","text":"","title":"GitHub Pull Request in 100 Seconds - Fireship"},{"location":"resources/learning-Git/#git-vs-github-whats-the-difference-ibm-technology","text":"","title":"Git vs. GitHub: What's the difference? - IBM Technology"},{"location":"resources/learning-Python/","text":"Introduction # The Python language is the CORE of all the software within DFR . It is critical that you are at the very least willing to learn the language, as otherwise your participation within the DFR Software team will be highly limited . From a very basic point of view, Python is a high level interpreted language, which essentially means that it uses conventional human readable words for its basic syntax structure, an example of which can be found below, and isn't a compiled language. import random # How you bring in external packages (classes), in this case the \"random\" package. num = random.random() # assigning a variable named \"num\" to the returned value of the \"random\" function from within the \"random\" package. print(num) # prints the value of the \"num\" variable to the console. Because Python is a high level language, this means that it is, for most people, relatively easy to learn, and holds little nuance when compared to lower level languages like C++ , or Java . Which also means that the learning experience is much more enjoyable, due to its simplicity, than other languages. (unless of course you're a masochist) Table of contents # Introduction Table of Contents Already know another language? Where do I begin? Text Resources Video Resources Already know another language? # If you are already familiar with another language and want to translate your skills over to Python, it should be relatively easy! Go ahead and check out Learn X in Y minutes' python write-up for the most straight forward examples of proper Python syntax. You may also find any of the resources from the below section useful when learning Python for the first time. Where do I begin? # Brand new to Python or coding in general? No worries, below are some of the best write up's and publicly available resources for dipping your toes into the Python language. Text resources # Name Description URL freeCodeCamp.org A public charity dedicated to making some of the best guides for learning all kinds of programming related topics. freecodecamp.org/news/tag/python awesome-python My personal favorite repo for more in depth learning about python and how to actually apply it in a more real world use case. github.com/vinta/awesome-python learn-python A very well written and still decently maintained GitHub repo dedicated to being a \"cheatsheet\" for everything Python . github.com/trekhleb/learn-python Video resources # Python in 100 Seconds - Fireship # Python for Beginners \u2013 Full Course - freeCodeCamp.org # Python RIGHT NOW!! (10 Part Series) - NetworkChuck #","title":"Learning Python"},{"location":"resources/learning-Python/#introduction","text":"The Python language is the CORE of all the software within DFR . It is critical that you are at the very least willing to learn the language, as otherwise your participation within the DFR Software team will be highly limited . From a very basic point of view, Python is a high level interpreted language, which essentially means that it uses conventional human readable words for its basic syntax structure, an example of which can be found below, and isn't a compiled language. import random # How you bring in external packages (classes), in this case the \"random\" package. num = random.random() # assigning a variable named \"num\" to the returned value of the \"random\" function from within the \"random\" package. print(num) # prints the value of the \"num\" variable to the console. Because Python is a high level language, this means that it is, for most people, relatively easy to learn, and holds little nuance when compared to lower level languages like C++ , or Java . Which also means that the learning experience is much more enjoyable, due to its simplicity, than other languages. (unless of course you're a masochist)","title":"Introduction"},{"location":"resources/learning-Python/#table-of-contents","text":"Introduction Table of Contents Already know another language? Where do I begin? Text Resources Video Resources","title":"Table of contents"},{"location":"resources/learning-Python/#already-know-another-language","text":"If you are already familiar with another language and want to translate your skills over to Python, it should be relatively easy! Go ahead and check out Learn X in Y minutes' python write-up for the most straight forward examples of proper Python syntax. You may also find any of the resources from the below section useful when learning Python for the first time.","title":"Already know another language?"},{"location":"resources/learning-Python/#where-do-i-begin","text":"Brand new to Python or coding in general? No worries, below are some of the best write up's and publicly available resources for dipping your toes into the Python language.","title":"Where do I begin?"},{"location":"resources/learning-Python/#text-resources","text":"Name Description URL freeCodeCamp.org A public charity dedicated to making some of the best guides for learning all kinds of programming related topics. freecodecamp.org/news/tag/python awesome-python My personal favorite repo for more in depth learning about python and how to actually apply it in a more real world use case. github.com/vinta/awesome-python learn-python A very well written and still decently maintained GitHub repo dedicated to being a \"cheatsheet\" for everything Python . github.com/trekhleb/learn-python","title":"Text resources"},{"location":"resources/learning-Python/#video-resources","text":"","title":"Video resources"},{"location":"resources/learning-Python/#python-in-100-seconds-fireship","text":"","title":"Python in 100 Seconds - Fireship"},{"location":"resources/learning-Python/#python-for-beginners-full-course-freecodecamporg","text":"","title":"Python for Beginners \u2013 Full Course - freeCodeCamp.org"},{"location":"resources/learning-Python/#python-right-now-10-part-series-networkchuck","text":"","title":"Python RIGHT NOW!! (10 Part Series) - NetworkChuck"},{"location":"resources/learning-SQL/","text":"Introduction # SQL (Structured Query Language) is a very powerful tool in the modern age, and has been for many years. It is a rather simple language designed for interacting with most modern day database infrastructure, and has even gone as far as being declared by ANSI as the national standard for all relational database management systems. Like Python , SQL is a high level \"language\" that uses a human readable format for its syntax structure, and as such, it is a relatively easy language to learn. Table of contents # Introduction Table of Contents Example SQL Query Where do I begin? Text Resources Video Resources Example SQL query # SELECT column_1 FROM table_1 WHERE column_2='True'; To better understand the above query, below is an example table to visually explain what the query is requesting. table_1 id column_1 column_2 1 Hello False 2 World! True With the example query above, the output would be World! , this is because when the query is run it SELECT s all the values of column_1 FROM the table named table_1 WHERE the value of column_2 is equivalent to True . Since the value of column_1 is World! on the same row that the value of column_2 is True , then that is the value that we are looking for with the example query. Where do I begin? # Starting with SQL is relatively easy, there are many means of setting up local SQL databases that you can freely play around with, and there is also many resources to help get you up and running with SQL in no time. It seems to be the case for many that simply making an example database and trying to manipulate the data within, or trying to get data out via queries is one of the best ways to learn SQL, but along with this there are multiple resources below for learning SQL. Text resources # Name Description URL W3Schools.com Easily one of the best free and interactive SQL tutorials. If you've been programming for some time now, there is a very good chance you have come across if not used some of W3Schools' resources before. Overall a very useful and in-depth course that covers everything that you will need to know regarding SQL. www.w3schools.com/sql Codecademy.com Like W3Schools, also an incredible resource for learning anything and everything SQL. A more traditional \"course\" than that of W3Schools' offering, that uses a project based approach to learning instead of little incremental chunks. The course will teach you how to make and work with your own databases, and create meaningful queries for the tables/data within. codecademy.com/learn/learn-sql Video resources # SQL Explained in 100 Seconds - Fireship # Learn Complete SQL (17 Part Series) - techTFQ # SQL Full Course In 10 Hours - edureka! #","title":"Learning SQL"},{"location":"resources/learning-SQL/#introduction","text":"SQL (Structured Query Language) is a very powerful tool in the modern age, and has been for many years. It is a rather simple language designed for interacting with most modern day database infrastructure, and has even gone as far as being declared by ANSI as the national standard for all relational database management systems. Like Python , SQL is a high level \"language\" that uses a human readable format for its syntax structure, and as such, it is a relatively easy language to learn.","title":"Introduction"},{"location":"resources/learning-SQL/#table-of-contents","text":"Introduction Table of Contents Example SQL Query Where do I begin? Text Resources Video Resources","title":"Table of contents"},{"location":"resources/learning-SQL/#example-sql-query","text":"SELECT column_1 FROM table_1 WHERE column_2='True'; To better understand the above query, below is an example table to visually explain what the query is requesting. table_1 id column_1 column_2 1 Hello False 2 World! True With the example query above, the output would be World! , this is because when the query is run it SELECT s all the values of column_1 FROM the table named table_1 WHERE the value of column_2 is equivalent to True . Since the value of column_1 is World! on the same row that the value of column_2 is True , then that is the value that we are looking for with the example query.","title":"Example SQL query"},{"location":"resources/learning-SQL/#where-do-i-begin","text":"Starting with SQL is relatively easy, there are many means of setting up local SQL databases that you can freely play around with, and there is also many resources to help get you up and running with SQL in no time. It seems to be the case for many that simply making an example database and trying to manipulate the data within, or trying to get data out via queries is one of the best ways to learn SQL, but along with this there are multiple resources below for learning SQL.","title":"Where do I begin?"},{"location":"resources/learning-SQL/#text-resources","text":"Name Description URL W3Schools.com Easily one of the best free and interactive SQL tutorials. If you've been programming for some time now, there is a very good chance you have come across if not used some of W3Schools' resources before. Overall a very useful and in-depth course that covers everything that you will need to know regarding SQL. www.w3schools.com/sql Codecademy.com Like W3Schools, also an incredible resource for learning anything and everything SQL. A more traditional \"course\" than that of W3Schools' offering, that uses a project based approach to learning instead of little incremental chunks. The course will teach you how to make and work with your own databases, and create meaningful queries for the tables/data within. codecademy.com/learn/learn-sql","title":"Text resources"},{"location":"resources/learning-SQL/#video-resources","text":"","title":"Video resources"},{"location":"resources/learning-SQL/#sql-explained-in-100-seconds-fireship","text":"","title":"SQL Explained in 100 Seconds - Fireship"},{"location":"resources/learning-SQL/#learn-complete-sql-17-part-series-techtfq","text":"","title":"Learn Complete SQL (17 Part Series) - techTFQ"},{"location":"resources/learning-SQL/#sql-full-course-in-10-hours-edureka","text":"","title":"SQL Full Course In 10 Hours - edureka!"},{"location":"resources/new-to-CS-or-SE/","text":"Introduction # Hey, seeing as you clicked this you presumably have little to no experience in the Computer Science or Software Engineering field, and that's totally okay. Here on the DFR Software team, very few people have any kind of background knowledge with most of the technologies that we utilize on a daily basis when they enter the club, and that's 100% normal. For most, any kind of formal education up until college lacks any form of \"computer education,\" despite using them almost every day. So suffice to say, you're not alone, and hopefully with the help of this onboarding, and your own willingness to learn (this really is the most important thing you need), you'll be a contributing member of the team in no time! Table of contents # Introduction Table of Contents Before you get started Getting started Choosing an IDE Downloading and Installing Python What now? Before you get started # When it comes to learning any language or technology, I always recommend that you go ahead and give yourself an end goal of what you want to accomplish before starting anything. For example if you want to learn Python , then you could give yourself the goal of wanting to make your own local webserver. From that goal learning how to build it with your own research, or knowledge you carry from elsewhere, will allow you to learn how different parts of the Python language interact, along with also actively learning how to problem solve. Instead of simply following a tutorial that tells you everything to do. Getting started # Choosing an IDE # If you're truly brand new to programming at all, then you've likely never heard of what an Integrated Development Environment (IDE) is, and that's all good. When most CS/SE students come to UTD, they are presented with an online IDE like OnlineGDB through their classes, and while this does suit the needs of most class here on campus, there should never be a time when you rely on an online IDE for any kind of \"large scale\" development, or really ever... It's best practice to avoid using any online IDEs, primarily from a usability standpoint, but also because a local IDE, such as VS Code , has many more useful features when developing anything. Something worth considering, is there is a VAST variety of IDEs, and not all of them are created equal. In essence this means that it's kind of personal preference as to what your favorite environment is, and as such below will be a list of the most commonly used IDEs for all kinds of development. (Note, there are many IDEs that are specialized in a specific language, or type of development, but for the sake of this write-up I will only be focusing on lightweight IDEs that work with \"any\" language.) 4 (Below list taken from Awesome-IDEs . I highly recommend checking this list out if you want a larger more specified list of IDEs.) Name Description Links System Support Fees Visual Studio Code A highly customizable code editor with a wide range of extensions for various languages and frameworks. Offical Website Guthub Mac Windows Linux Online Chrome OS Free, Proprietary, Open-Source PyCharm An intelligent Python IDE with integrated tools for efficient coding and debugging. Official Website Github Mac Windows Linux Paid, Proprietary, Freemium, Open-Source Eclipse A versatile IDE is known for its Java development capabilities and extensive plugin ecosystem. Official Website Mac Windows Linux BSD Paid, Proprietary, Freemium, Open-Source KDevelop A cross-platform IDE for C, C++, Python, QML/JavaScript and PHP Official Website Github Windows Linux KDE Free, Open-Source Microsoft Visual Studio An integrated development environment for various programming languages, including C++, C#, and more. Official Website Mac Windows Online .NET Framework Free, Paid, Proprietary My personal recommendation is VS Code for it's versatility and how lightweight it is out of the box. On top of those factors it also has a MASSIVE plugin/extension community that likely has any and all means of solving any problem that you might run into while using VS Code , including also being one of the most customizable visually. Downloading and installing Python # As most, if not all, of the projects within DFR are based on Python , having it on your system is a very important step. Most of the projects here are developed on Python 3.10.X and higher. This means that you will at the very least need some version of Python, greater than or equal to 3.10.X. The most up to date versions as of the time of writing, with installers, can be found in the list below. Version # Date of Release Version Download Page 3.12.6 September 6, 2024 Download 3.11.9 April 2, 2024 Download 3.10.11 April 5, 2023 Download Once you have selected a version, find the installer for your specific operating system, in most cases this will be the Windows installer (64-bit) . Again assuming you are on a Windows operating system, open the installer with administrative permissions, and once open make sure to tick the Add python.exe to PATH check box at the bottom of the installer before clicking \"Install Now\". After the installer completes, you can check if you have Python available by opening your terminal of choice and typing the command python --version , at which point you should see the console display a string of text that states your installed Python version (If on Windows you can open your terminal by pressing your Windows key + R, then within the box that appears typing cmd and clicking OK .) What now? # After you have selected an IDE, and successfully installed Python , you're good to continue onto where everyone else would start! You can do this by revisiting the Resources page, checking the sidebar, or just by clicking the \"Next\" arrow right below this.","title":"New to CS/SE"},{"location":"resources/new-to-CS-or-SE/#introduction","text":"Hey, seeing as you clicked this you presumably have little to no experience in the Computer Science or Software Engineering field, and that's totally okay. Here on the DFR Software team, very few people have any kind of background knowledge with most of the technologies that we utilize on a daily basis when they enter the club, and that's 100% normal. For most, any kind of formal education up until college lacks any form of \"computer education,\" despite using them almost every day. So suffice to say, you're not alone, and hopefully with the help of this onboarding, and your own willingness to learn (this really is the most important thing you need), you'll be a contributing member of the team in no time!","title":"Introduction"},{"location":"resources/new-to-CS-or-SE/#table-of-contents","text":"Introduction Table of Contents Before you get started Getting started Choosing an IDE Downloading and Installing Python What now?","title":"Table of contents"},{"location":"resources/new-to-CS-or-SE/#before-you-get-started","text":"When it comes to learning any language or technology, I always recommend that you go ahead and give yourself an end goal of what you want to accomplish before starting anything. For example if you want to learn Python , then you could give yourself the goal of wanting to make your own local webserver. From that goal learning how to build it with your own research, or knowledge you carry from elsewhere, will allow you to learn how different parts of the Python language interact, along with also actively learning how to problem solve. Instead of simply following a tutorial that tells you everything to do.","title":"Before you get started"},{"location":"resources/new-to-CS-or-SE/#getting-started","text":"","title":"Getting started"},{"location":"resources/new-to-CS-or-SE/#choosing-an-ide","text":"If you're truly brand new to programming at all, then you've likely never heard of what an Integrated Development Environment (IDE) is, and that's all good. When most CS/SE students come to UTD, they are presented with an online IDE like OnlineGDB through their classes, and while this does suit the needs of most class here on campus, there should never be a time when you rely on an online IDE for any kind of \"large scale\" development, or really ever... It's best practice to avoid using any online IDEs, primarily from a usability standpoint, but also because a local IDE, such as VS Code , has many more useful features when developing anything. Something worth considering, is there is a VAST variety of IDEs, and not all of them are created equal. In essence this means that it's kind of personal preference as to what your favorite environment is, and as such below will be a list of the most commonly used IDEs for all kinds of development. (Note, there are many IDEs that are specialized in a specific language, or type of development, but for the sake of this write-up I will only be focusing on lightweight IDEs that work with \"any\" language.) 4 (Below list taken from Awesome-IDEs . I highly recommend checking this list out if you want a larger more specified list of IDEs.) Name Description Links System Support Fees Visual Studio Code A highly customizable code editor with a wide range of extensions for various languages and frameworks. Offical Website Guthub Mac Windows Linux Online Chrome OS Free, Proprietary, Open-Source PyCharm An intelligent Python IDE with integrated tools for efficient coding and debugging. Official Website Github Mac Windows Linux Paid, Proprietary, Freemium, Open-Source Eclipse A versatile IDE is known for its Java development capabilities and extensive plugin ecosystem. Official Website Mac Windows Linux BSD Paid, Proprietary, Freemium, Open-Source KDevelop A cross-platform IDE for C, C++, Python, QML/JavaScript and PHP Official Website Github Windows Linux KDE Free, Open-Source Microsoft Visual Studio An integrated development environment for various programming languages, including C++, C#, and more. Official Website Mac Windows Online .NET Framework Free, Paid, Proprietary My personal recommendation is VS Code for it's versatility and how lightweight it is out of the box. On top of those factors it also has a MASSIVE plugin/extension community that likely has any and all means of solving any problem that you might run into while using VS Code , including also being one of the most customizable visually.","title":"Choosing an IDE"},{"location":"resources/new-to-CS-or-SE/#downloading-and-installing-python","text":"As most, if not all, of the projects within DFR are based on Python , having it on your system is a very important step. Most of the projects here are developed on Python 3.10.X and higher. This means that you will at the very least need some version of Python, greater than or equal to 3.10.X. The most up to date versions as of the time of writing, with installers, can be found in the list below. Version # Date of Release Version Download Page 3.12.6 September 6, 2024 Download 3.11.9 April 2, 2024 Download 3.10.11 April 5, 2023 Download Once you have selected a version, find the installer for your specific operating system, in most cases this will be the Windows installer (64-bit) . Again assuming you are on a Windows operating system, open the installer with administrative permissions, and once open make sure to tick the Add python.exe to PATH check box at the bottom of the installer before clicking \"Install Now\". After the installer completes, you can check if you have Python available by opening your terminal of choice and typing the command python --version , at which point you should see the console display a string of text that states your installed Python version (If on Windows you can open your terminal by pressing your Windows key + R, then within the box that appears typing cmd and clicking OK .)","title":"Downloading and installing Python"},{"location":"resources/new-to-CS-or-SE/#what-now","text":"After you have selected an IDE, and successfully installed Python , you're good to continue onto where everyone else would start! You can do this by revisiting the Resources page, checking the sidebar, or just by clicking the \"Next\" arrow right below this.","title":"What now?"},{"location":"resources/resources/","text":"Overview # DISCLAIMER Although you personally may have other skills to offer to DFR Software that are not addressed here, you should at the very least have an understanding of everything detailed within this onboarding documentation to be successful within our team. Table of contents # New to CS/SE Learning Python Learning Git/Github Learning SQL Learning Docker","title":"Resources"},{"location":"resources/resources/#overview","text":"DISCLAIMER Although you personally may have other skills to offer to DFR Software that are not addressed here, you should at the very least have an understanding of everything detailed within this onboarding documentation to be successful within our team.","title":"Overview"},{"location":"resources/resources/#table-of-contents","text":"New to CS/SE Learning Python Learning Git/Github Learning SQL Learning Docker","title":"Table of contents"}]}